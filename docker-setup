FROM node:18-alpine as builder

WORKDIR /src/app

# Copy package files first (for better caching)
COPY package*.json ./
RUN npm install

# Copy source files
COPY tsconfig.json ./
COPY src ./src

# Copy migration files (als deze in de map "drizzle" staan)
COPY drizzle ./drizzle

# Create a custom tsconfig that skips library checks
RUN echo '{ "extends": "./tsconfig.json", "compilerOptions": { "skipLibCheck": true } }' > tsconfig.build.json
RUN npm run build -- --project tsconfig.build.json

# Print the directory structure for debugging
RUN find . -type f | sort

FROM node:18-alpine

RUN addgroup -g 1001 -S appgroup \
  && adduser -S appuser -u 1001 -G appgroup

WORKDIR /src/app

# Copy only what's needed for production
COPY --from=builder /src/app/dist ./dist
COPY --from=builder /src/app/package*.json ./

RUN npm install --production

# Kopieer wait-for-db.sh en maak het uitvoerbaar
COPY wait-for-db.sh /usr/local/bin/wait-for-db.sh
RUN chmod +x /usr/local/bin/wait-for-db.sh

RUN chown -R appuser:appgroup /src/app/drizzle \
    && chmod -R 644 /src/app/drizzle


CMD ["node", "npm run db:migrate"]

EXPOSE 3000

USER appuser

CMD ["/usr/local/bin/wait-for-db.sh", "node", "dist/app/index.js"]
